name:                haskale
version:             0.1.0.0
github:              "rdelgatte/haskale"
license:             BSD3
maintainer:          "Julien Debon / RÃ©mi Delgatte"

extra-source-files:
  - README.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            Web

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/rdelgatte/haskale#readme>

ghc-options:
  - -Wall
  - -Wcompat
  # Some additional compiler warnings from https://medium.com/mercury-bank/enable-all-the-warnings-a0517bc081c3
  - -Wincomplete-uni-patterns
  - -Wincomplete-record-updates
  - -Wmissing-home-modules
  - -Widentities
  - -Wredundant-constraints
  # Parallel by default
  - -j
  # Don't optimize by default (faster build time)
  - -O0

dependencies:
  - base >= 4.7 && < 5
  - scientific
  - lens
  # routes
  - servant
  - servant-server
  # Json (de)serialize
  - aeson
  - aeson-casing
  # Http (used by aeson)
  - wai
  - wai-extra
  - warp
  # Http codes / error types
  - http-types
  - time
  - text
  # Provides map and set
  - containers
  - bytestring
  # To check members of parsable json
  - unordered-containers
  # Swagger (HTTP API + UI)
  - servant-swagger
  - servant-swagger-ui
  - swagger2
  - insert-ordered-containers
  # Database stuff (Persistent requires MTL and Logger functions...)
  - persistent
  - persistent-sqlite
  - persistent-template
  - mtl
  - monad-logger

default-extensions:
  - BangPatterns
  - BinaryLiterals
  - ConstraintKinds
  - DataKinds
  - DefaultSignatures
  - DeriveDataTypeable
  - DeriveFoldable
  - DeriveFunctor
  - DeriveGeneric
  - DeriveTraversable
  - DerivingStrategies
  - DoAndIfThenElse
  # To allow multiple declaration of the same field name
  - DuplicateRecordFields
  - EmptyDataDecls
  - ExistentialQuantification
  - FlexibleContexts
  - FlexibleInstances
  - FunctionalDependencies
  - GADTs
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - MultiWayIf
  - NamedFieldPuns
  - OverloadedLists
  - OverloadedStrings
  - PartialTypeSignatures
  - PatternGuards
  - PolyKinds
  - QuasiQuotes
  - RankNTypes
  - RecordWildCards
  - ScopedTypeVariables
  - StandaloneDeriving
  - TemplateHaskell
  - TupleSections
  - TypeApplications
  - TypeFamilies
  - TypeOperators
  - TypeSynonymInstances
  - UndecidableInstances
  - ViewPatterns
  - StrictData

library:
  source-dirs: src

executables:
  haskale-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
    dependencies:
      - haskale

tests:
  haskale-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
      - -Wall
      - -Wcompat
      - -Wmissing-home-modules
      - -Widentities
      - -Wredundant-constraints
      # Our test convention for HUnit would make it unnecessarily verbose to add the signature of each test
      - -fno-warn-missing-signatures
      # Use orphan instances in tests to add Arbitrary (QuickCheck) behaviour without impacting the Production type
      - -fno-warn-orphans
      # Sometimes you want to assert a pattern in tests
      - -fno-warn-incomplete-uni-patterns
      - -threaded
      - -rtsopts
      - -with-rtsopts=-N
      - -O0
    dependencies:
      - haskale
      # Property based testing
      - QuickCheck
      - quickcheck-instances
      - quickcheck-arbitrary-adt
      # Unit testing
      - HUnit
      # Test aggregation and discovery
      - tasty
      - tasty-quickcheck
      - tasty-hspec
      - tasty-hunit
      - tasty-discover
      # To assert encoded Json in a specific order
      - aeson-pretty
      # To get Json as raw string
      - raw-strings-qq
